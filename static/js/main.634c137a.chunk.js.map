{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","components/api/api.ts","components/api/user.ts","components/api/todos.ts","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","deleteTodo","changeStatus","changeTitle","useState","editTodo","setEditTodo","title","newTitle","setNewTitle","makeChanges","length","id","className","classNames","completed","onDoubleClick","type","onChange","htmlFor","onClick","value","e","target","onBlur","onKeyDown","event","key","nativeEvent","TodoList","items","map","item","TodosFilter","showTodos","selectFilter","setSelectFilter","to","BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","myUserId","API_URL","getMyTodos","URL","res","postNewTodo","a","method","headers","body","JSON","stringify","userId","removeTodo","todoId","data","TodoApp","userName","setUserName","myTodos","setMyTodos","errorMessage","setErrorMessage","loadUser","userFromServer","error","name","loadTodos","setTitle","filter","activeTodos","setActiveTodos","completedTodos","setCompletedTodos","toggleAllActive","setToggleAllActive","visiableTodos","setVisiableTodos","useEffect","activeTodosFilter","completedTodosFilter","onSubmit","preventDefault","placeholder","result","changeStatusAll","param","forEach","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.634c137a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport './TodoItem.scss';\n\ntype Props = {\n  todo: Todo,\n  deleteTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  changeTitle: (todoId: number, newTitle: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  deleteTodo,\n  changeStatus,\n  changeTitle,\n}) => {\n  const [editTodo, setEditTodo] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const makeChanges = () => {\n    if (newTitle.length === 0) {\n      deleteTodo(todo.id);\n      setEditTodo(false);\n    } else {\n      changeTitle(todo.id, newTitle);\n      setEditTodo(false);\n    }\n  };\n\n  return (\n    <li\n      className={classNames(\n        `TodoItem + ${todo.completed\n          ? 'TodoItem--completed'\n          : ''\n        }`,\n      )}\n      onDoubleClick={\n        () => setEditTodo(true)\n      }\n    >\n      <input\n        type=\"checkbox\"\n        className=\"TodoItem__toggle\"\n        id=\"toggle-view\"\n        onChange={() => {\n          changeStatus(todo.id);\n        }}\n      />\n      <label\n        htmlFor=\"toggle-view\"\n        className={classNames(\n          `TodoItem__label + ${todo.completed\n            ? 'TodoItem__label--completed'\n            : ''\n          }`,\n        )}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"TodoItem__destroy\"\n        data-cy=\"deleteTodo\"\n        onClick={\n          () => deleteTodo(todo.id)\n        }\n      />\n      <input\n        type=\"text\"\n        className={editTodo\n          ? 'TodoItem__edit--active input'\n          : 'TodoItem__edit input'}\n        value={newTitle}\n        onChange={(e) => {\n          setNewTitle(e.target.value);\n        }}\n        onBlur={() => {\n          makeChanges();\n        }}\n        onKeyDown={(event) => {\n          const { key } = event.nativeEvent;\n\n          if (key === 'Enter') {\n            makeChanges();\n          } else if (key === 'Escape') {\n            setNewTitle(todo.title);\n            setEditTodo(false);\n          }\n        }}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\nimport { Todo } from '../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  items: Todo[],\n  deleteTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  changeTitle: (todoId: number, newTitle: string) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  items,\n  deleteTodo,\n  changeStatus,\n  changeTitle,\n}) => {\n  return (\n    <ul className=\"TodoList\">\n      {items.map((item: Todo) => (\n        <TodoItem\n          todo={item}\n          deleteTodo={deleteTodo}\n          changeStatus={changeStatus}\n          changeTitle={changeTitle}\n          key={item.id}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport './TodosFilter.scss';\n\ntype Props = {\n  showTodos: (param: string) => void,\n};\n\nexport const TodosFilter: React.FC<Props> = ({ showTodos }) => {\n  const [selectFilter, setSelectFilter] = useState('all');\n\n  return (\n    <ul className=\"TodosFilter\">\n      <li className=\"TodosFilter__items\">\n        <NavLink\n          className={\n            classNames(`TodosFilter__link + ${selectFilter === 'all'\n              ? 'TodosFilter__link--selected'\n              : ''\n            }`)\n          }\n          to=\"/all\"\n          onClick={() => {\n            showTodos('all');\n            setSelectFilter('all');\n          }}\n        >\n          All\n        </NavLink>\n      </li>\n\n      <li className=\"TodosFilter__items\">\n        <NavLink\n          className={\n            classNames(`TodosFilter__link + ${selectFilter === 'active'\n              ? 'TodosFilter__link--selected'\n              : ''\n            }`)\n          }\n          to=\"/active\"\n          onClick={() => {\n            showTodos('active');\n            setSelectFilter('active');\n          }}\n        >\n          Active\n        </NavLink>\n      </li>\n\n      <li className=\"TodosFilter__items\">\n        <NavLink\n          className={\n            classNames(`TodosFilter__link + ${selectFilter === 'completed'\n              ? 'TodosFilter__link--selected'\n              : ''\n            }`)\n          }\n          to=\"/completed\"\n          onClick={() => {\n            showTodos('completed');\n            setSelectFilter('completed');\n          }}\n        >\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options?: any) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { request } from './api';\n\nexport const myUserId = 4063;\n\nexport const getUser = () => (\n  request(`/users/${myUserId}`)\n);\n","import { request, BASE_URL } from './api';\nimport { myUserId } from './user';\n\nconst API_URL = 'https://mate.academy/students-api/todos';\n\nexport const getMyTodos = () => {\n  const URL = `${BASE_URL}/todos?userId=${myUserId}`;\n\n  return fetch(URL)\n    .then(res => res.json());\n};\n\nexport const postNewTodo = async (title: string) => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      userId: myUserId,\n      completed: false,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const removeTodo = (todoId: number) => {\n  fetch(`${API_URL}/${todoId}`, { method: 'DELETE' });\n};\n\nexport const editTodo = (url: string, data: {}) => {\n  return request(url, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport { getUser } from '../api/user';\nimport {\n  getMyTodos, postNewTodo, removeTodo, editTodo,\n} from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport './TodoApp.scss';\n\nexport const TodoApp: React.FC = () => {\n  // #region loadUser, loadTodos\n  const [userName, setUserName] = useState('');\n  const [myTodos, setMyTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const loadUser = async () => {\n    const userFromServer: User = await getUser();\n\n    if (!userFromServer.error) {\n      setUserName(userFromServer.name);\n    } else {\n      setErrorMessage('Failed to fecth User Info');\n    }\n  };\n\n  const loadTodos = async () => {\n    getMyTodos().then(setMyTodos);\n  };\n  // #endregion\n\n  // #region addNewTodo, deleteTodo\n  const [title, setTitle] = useState('');\n\n  const addNewTodo = () => {\n    postNewTodo(title);\n    setTitle('');\n  };\n\n  const deleteTodo = (todoId: number) => {\n    removeTodo(todoId);\n    setMyTodos(myTodos.filter(\n      (todo: Todo) => todo.id !== todoId,\n    ));\n  };\n  // #endregion\n\n  const [activeTodos, setActiveTodos] = useState<Todo[]>([]);\n  const [completedTodos, setCompletedTodos] = useState<Todo[]>([]);\n\n  // #region changeTodo\n  const changeStatus = (todoId: number) => {\n    setMyTodos(myTodos.map((todo: Todo) => {\n      if (todo.id === todoId) {\n        const data = { completed: !todo.completed };\n\n        editTodo(`/todos/${todoId}`, data);\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return {\n        ...todo,\n      };\n    }));\n  };\n\n  const changeTitle = (todoId: number, newTitle: string) => {\n    const data = { title: newTitle };\n\n    if (!newTitle) {\n      removeTodo(todoId);\n    }\n\n    editTodo(`/todos/${todoId}`, data);\n    loadTodos();\n  };\n  // #endregion\n\n  const [toggleAllActive, setToggleAllActive] = useState(false);\n\n  const changeStatusAll = () => {\n    const result = myTodos.map((todo: Todo) => {\n      if (!toggleAllActive) {\n        editTodo(`/todos/${todo.id}`, { completed: true });\n\n        return {\n          ...todo,\n          completed: true,\n        };\n      }\n\n      editTodo(`/todos/${todo.id}`, { completed: false });\n\n      return {\n        ...todo,\n        completed: false,\n      };\n    });\n\n    setMyTodos(result);\n    setToggleAllActive(!toggleAllActive);\n  };\n\n  // #region visiableTodos\n  const [visiableTodos, setVisiableTodos] = useState(myTodos);\n\n  const showTodos = (param: string) => {\n    switch (param) {\n      case 'all':\n        setVisiableTodos(myTodos);\n        break;\n      case 'active':\n        setVisiableTodos(activeTodos);\n        break;\n      case 'completed':\n        setVisiableTodos(completedTodos);\n        break;\n      default:\n        break;\n    }\n  };\n  // #endregion\n\n  const clearCompleted = () => {\n    myTodos.forEach((todo: Todo) => {\n      if (todo.completed) {\n        deleteTodo(todo.id);\n      }\n    });\n\n    setMyTodos(myTodos.filter((todo: Todo) => !todo.completed));\n\n    setToggleAllActive(false);\n  };\n\n  useEffect(() => {\n    loadUser();\n    loadTodos();\n  }, []);\n\n  useEffect(() => {\n    const activeTodosFilter = myTodos.filter(\n      (todo: Todo) => !todo.completed,\n    );\n\n    const completedTodosFilter = myTodos.filter(\n      (todo: Todo) => todo.completed,\n    );\n\n    loadTodos();\n    setActiveTodos(activeTodosFilter);\n    setCompletedTodos(completedTodosFilter);\n    setVisiableTodos(myTodos);\n  }, [myTodos]);\n\n  return (\n    <section className=\"TodoApp\">\n      <header className=\"TodoApp__header\">\n        <h1 className=\"TodoApp__title\">\n          todos of\n          {' '}\n          {userName}\n        </h1>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            addNewTodo();\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"TodoApp__new-todo input\"\n            placeholder=\"What needs to be done?\"\n            data-cy=\"createTodo\"\n            value={title}\n            onChange={\n              (event) => setTitle(event.target.value)\n            }\n          />\n        </form>\n      </header>\n\n      <section className=\"TodoApp__main\">\n        {errorMessage && (\n          <p className=\"TodoApp__error\">{errorMessage}</p>\n        )}\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"TodoApp__toggle-all\"\n          data-cy=\"toggleAll\"\n          onChange={() => {\n            changeStatusAll();\n          }}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          className={\n            classNames(`TodoApp__toggleAll-label + ${toggleAllActive\n              ? 'TodoApp__toggleAll-label--completed'\n              : ''\n            }`)\n          }\n        >\n          Mark all as complete\n        </label>\n\n        <TodoList\n          items={visiableTodos}\n          deleteTodo={deleteTodo}\n          changeStatus={changeStatus}\n          changeTitle={changeTitle}\n        />\n      </section>\n\n      {myTodos.length > 0 && (\n        <footer className=\"TodoApp__footer\">\n          <span className=\"TodoApp__todo-count\" data-cy=\"todosCounter\">\n            {activeTodos.length === 1\n              ? '1 item left'\n              : `${activeTodos.length} items left`}\n          </span>\n\n          <TodosFilter\n            showTodos={showTodos}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"TodoApp__clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n","import { TodoApp } from './components/TodoApp';\n\nconst App: React.FC = () => {\n  return (\n    <TodoApp />\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.scss';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}