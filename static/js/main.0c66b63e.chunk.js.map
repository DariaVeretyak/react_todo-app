{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","components/api/todos.ts","components/api/api.ts","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","deleteTodo","changeStatus","changeTitle","useState","editTodo","setEditTodo","title","newTitle","setNewTitle","makeChanges","length","id","className","classNames","completed","type","onClick","onKeyDown","onDoubleClick","value","onChange","e","target","onBlur","event","key","nativeEvent","TodoList","items","map","item","TodosFilter","showTodos","selectFilter","setSelectFilter","to","API_URL","URL","postNewTodo","a","fetch","method","headers","body","JSON","stringify","userId","response","json","removeTodo","todoId","url","data","options","then","ok","Error","status","statusText","request","TodoApp","myTodos","setMyTodos","loadTodos","res","setTitle","filter","todosLeft","useMemo","reduce","acc","todosCompleted","toggleAllActive","setToggleAllActive","visiableTodos","setVisiableTodos","useEffect","onSubmit","preventDefault","placeholder","result","changeStatusAll","htmlFor","forEach","param","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c66b63e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport './TodoItem.scss';\n\ntype Props = {\n  todo: Todo,\n  deleteTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  changeTitle: (todoId: number, newTitle: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  deleteTodo,\n  changeStatus,\n  changeTitle,\n}) => {\n  const [editTodo, setEditTodo] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const makeChanges = () => {\n    if (newTitle.length === 0) {\n      deleteTodo(todo.id);\n      setEditTodo(false);\n    } else {\n      changeTitle(todo.id, newTitle);\n      setEditTodo(false);\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        `TodoItem + ${todo.completed\n          ? 'TodoItem--completed'\n          : ''\n        }`,\n      )}\n    >\n      <button\n        className={\n          classNames(\n            'TodoItem__label',\n            { 'TodoItem__label--completed': todo.completed },\n          )\n        }\n        type=\"button\"\n        onClick={() => {\n          changeStatus(todo.id);\n        }}\n        onKeyDown={() => {\n          changeStatus(todo.id);\n        }}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"TodoItem__toggle\"\n          id=\"toggle-view\"\n        />\n      </button>\n\n      <span\n        className={\n          classNames(\n            'TodoItem__text',\n            { 'TodoItem__text--completed': todo.completed },\n          )\n        }\n        onDoubleClick={\n          () => setEditTodo(true)\n        }\n      >\n        {todo.title}\n      </span>\n      <button\n        type=\"button\"\n        className=\"TodoItem__destroy\"\n        data-cy=\"deleteTodo\"\n        onClick={\n          () => deleteTodo(todo.id)\n        }\n      />\n      <input\n        type=\"text\"\n        className={editTodo\n          ? 'TodoItem__edit--active input'\n          : 'TodoItem__edit input'}\n        value={newTitle}\n        onChange={(e) => {\n          setNewTitle(e.target.value);\n        }}\n        onBlur={() => {\n          makeChanges();\n        }}\n        onKeyDown={(event) => {\n          const { key } = event.nativeEvent;\n\n          if (key === 'Enter') {\n            makeChanges();\n          } else if (key === 'Escape') {\n            setNewTitle(todo.title);\n            setEditTodo(false);\n          }\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\nimport { Todo } from '../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  items: Todo[],\n  deleteTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  changeTitle: (todoId: number, newTitle: string) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  items,\n  deleteTodo,\n  changeStatus,\n  changeTitle,\n}) => {\n  return (\n    <ul className=\"TodoList\">\n      {items.map((item: Todo) => (\n        <li\n          key={item.id}\n        >\n          <TodoItem\n            todo={item}\n            deleteTodo={deleteTodo}\n            changeStatus={changeStatus}\n            changeTitle={changeTitle}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport './TodosFilter.scss';\n\ntype Props = {\n  showTodos: (param: string) => void,\n};\n\nexport const TodosFilter: React.FC<Props> = ({ showTodos }) => {\n  const [selectFilter, setSelectFilter] = useState('all');\n\n  return (\n    <ul className=\"TodosFilter\">\n      <li className=\"TodosFilter__items\">\n        <NavLink\n          className={\n            classNames(\n              'TodosFilter__link',\n              { 'TodosFilter__link--selected': selectFilter === 'all' },\n            )\n          }\n          to=\"/all\"\n          onClick={() => {\n            showTodos('all');\n            setSelectFilter('all');\n          }}\n        >\n          All\n        </NavLink>\n      </li>\n\n      <li className=\"TodosFilter__items\">\n        <NavLink\n          className={\n            classNames(\n              'TodosFilter__link',\n              { 'TodosFilter__link--selected': selectFilter === 'active' },\n            )\n          }\n          to=\"/active\"\n          onClick={() => {\n            showTodos('active');\n            setSelectFilter('active');\n          }}\n        >\n          Active\n        </NavLink>\n      </li>\n\n      <li className=\"TodosFilter__items\">\n        <NavLink\n          className={\n            classNames(\n              'TodosFilter__link',\n              { 'TodosFilter__link--selected': selectFilter === 'completed' },\n            )\n          }\n          to=\"/completed\"\n          onClick={() => {\n            showTodos('completed');\n            setSelectFilter('completed');\n          }}\n        >\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n","import { request } from './api';\n\nexport const myUserId = 4063;\n\nconst API_URL = 'https://mate.academy/students-api/todos';\nconst URL = `${API_URL}?userId=${myUserId}`;\n\nexport const getMyTodos = () => {\n  return fetch(URL)\n    .then(res => res.json());\n};\n\nexport const postNewTodo = async (title: string) => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      completed: false,\n      userId: myUserId,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const removeTodo = (todoId: number) => {\n  fetch(`${API_URL}/${todoId}`, { method: 'DELETE' });\n};\n\nexport const editTodo = (url: string, data: {}) => {\n  return request(url, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options?: any) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport {\n  getMyTodos, postNewTodo, removeTodo, editTodo,\n} from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport './TodoApp.scss';\n\nexport const TodoApp: React.FC = () => {\n  // #region loadTodos\n  const [myTodos, setMyTodos] = useState<Todo[]>([]);\n\n  const loadTodos = async () => {\n    getMyTodos().then(setMyTodos);\n  };\n  // #endregion\n\n  // #region addNewTodo, deleteTodo\n  const [title, setTitle] = useState('');\n\n  const addNewTodo = () => {\n    postNewTodo(title).then(loadTodos);\n    setTitle('');\n  };\n\n  const deleteTodo = (todoId: number) => {\n    removeTodo(todoId);\n    setMyTodos(myTodos.filter(\n      (todo: Todo) => todo.id !== todoId,\n    ));\n  };\n  // #endregion\n\n  const todosLeft = useMemo(() => {\n    return (\n      myTodos.reduce((acc, todo) => (!todo.completed ? acc + 1 : acc), 0)\n    );\n  }, [myTodos]);\n\n  const todosCompleted = useMemo(() => {\n    return (\n      myTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n    );\n  }, [myTodos]);\n\n  // #region changeTodo\n  const changeStatus = (todoId: number) => {\n    myTodos.forEach((todo: Todo) => {\n      if (todo.id === todoId) {\n        const data = { completed: !todo.completed };\n\n        editTodo(`/todos/${todoId}`, data).then(loadTodos);\n      }\n    });\n  };\n\n  const changeTitle = (todoId: number, newTitle: string) => {\n    const data = { title: newTitle };\n\n    if (!newTitle) {\n      removeTodo(todoId);\n    }\n\n    editTodo(`/todos/${todoId}`, data).then(loadTodos);\n  };\n  // #endregion\n\n  const [toggleAllActive, setToggleAllActive] = useState(false);\n\n  const changeStatusAll = () => {\n    const result = myTodos.map((todo: Todo) => {\n      if (!toggleAllActive) {\n        editTodo(`/todos/${todo.id}`, { completed: true });\n\n        return {\n          ...todo,\n          completed: true,\n        };\n      }\n\n      editTodo(`/todos/${todo.id}`, { completed: false });\n\n      return {\n        ...todo,\n        completed: false,\n      };\n    });\n\n    setMyTodos(result);\n    setToggleAllActive(!toggleAllActive);\n  };\n\n  // #region visiableTodos\n  const [visiableTodos, setVisiableTodos] = useState(myTodos);\n\n  const showTodos = (param: string) => {\n    switch (param) {\n      case 'all':\n        setVisiableTodos(myTodos);\n        break;\n      case 'active':\n        setVisiableTodos(myTodos.filter(todo => !todo.completed));\n        break;\n      case 'completed':\n        setVisiableTodos(myTodos.filter(todo => todo.completed));\n        break;\n      default:\n        break;\n    }\n  };\n  // #endregion\n\n  const clearCompleted = () => {\n    myTodos.forEach((todo: Todo) => {\n      if (todo.completed) {\n        deleteTodo(todo.id);\n      }\n    });\n\n    setMyTodos(myTodos.filter((todo: Todo) => !todo.completed));\n\n    setToggleAllActive(false);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  useEffect(() => {\n    setVisiableTodos(myTodos);\n  }, [myTodos]);\n\n  return (\n    <section className=\"TodoApp\">\n      <header className=\"TodoApp__header\">\n        <h1 className=\"TodoApp__title\">\n          todos\n        </h1>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            addNewTodo();\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"TodoApp__new-todo input\"\n            placeholder=\"What needs to be done?\"\n            data-cy=\"createTodo\"\n            value={title}\n            onChange={\n              (event) => setTitle(event.target.value)\n            }\n          />\n        </form>\n      </header>\n\n      <section className=\"TodoApp__main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"TodoApp__toggle-all\"\n          data-cy=\"toggleAll\"\n          onChange={() => {\n            changeStatusAll();\n          }}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          className={\n            classNames(\n              'TodoApp__toggleAll-label',\n              { 'TodoApp__toggleAll-label--completed': toggleAllActive },\n            )\n          }\n        >\n          Mark all as complete\n        </label>\n\n        <TodoList\n          items={visiableTodos}\n          deleteTodo={deleteTodo}\n          changeStatus={changeStatus}\n          changeTitle={changeTitle}\n        />\n      </section>\n\n      {myTodos.length > 0 && (\n        <footer className=\"TodoApp__footer\">\n          <span className=\"TodoApp__todo-count\" data-cy=\"todosCounter\">\n            {todosLeft === 1\n              ? '1 item left'\n              : `${todosLeft} items left`}\n          </span>\n\n          <TodosFilter\n            showTodos={showTodos}\n          />\n\n          {todosCompleted > 0 && (\n            <button\n              type=\"button\"\n              className=\"TodoApp__clear-completed\"\n              onClick={() => clearCompleted()}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n","import { TodoApp } from './components/TodoApp';\n\nconst App: React.FC = () => {\n  return (\n    <TodoApp />\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.scss';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}